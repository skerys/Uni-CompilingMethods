func int fibbo (int number)
{
    
    int current = 1
    int previous = 0

    for int a = 1; i <= number; i++
    {
        int sumOfPrev2 = previous + current
        previous = current
        current = sumOfPrev2
    }
    write current
    return current
}

func void main()
{
    int test = fibbo(5)

    string[] myValues[2] = { "a value that has \" quotes \" inside", "test\\est"}
    string input
    read input

    
}

class foo
{
    private int a
    public float b = .5

    public init()
    {
        a = b * 80
    }

    private doStuff(string[] test)
    {
        for int i = 0; i < 5; i++
        {
            write test[0]
            if i == 3
            {
                break
            }
            else{
                next
            }
        }
    }
}


func void doStuff()
    {
        for int i = 0; i < 5 && foo() == true + 5; i++
        {
            write test[0]
            
        }
    }


<function_decl> ->
"func" <type_name> <identifier> <params> <stmt_block> ->
"func" <primitive_type_name> <identifier> <params> <stmt_block> ->
"func" "void" <identifier> <params> <stmt_block> ->
"func" "void" <identifier> <identChar> <params> <stmt_block> ->
...
func void <identChar> <identChar> ... <identChar> <params> <stmt_block> ->
func void doStuff <params> <stmt_block> ->
func void doStuff () <stmt_block> ->
func void doStuff () { <stmts } ->
func void doStuff () { <stmt_with_sep> } ->
func void doStuff () { <stmt>
 } ->
func void doStuff () { <control_stmt>
 } ->
func void doStuff () { <for_stmt>
 } ->

<for_stmt> ->
for <declare_stmt_init> ; <expression> ; <expression> <stmt_block> ->
for <type_name> <identifier> = <expression> ; <expression>; <expression> <stmt_block> ->
for <primitive_type_name> <identifier> = <expression> ; <expression>; <expression> <stmt_block> ->
for int <identifier> = <expression> ; <expression> ;<expression> <stmt_block> ->
for int <identChar> = <expression> ; <expression>; <expression> <stmt_block> ->
for int <letter> = <expression> ; <expression>; <expression> <stmt_block> ->
for int i = <expression> ; <expression>; <expression> <stmt_block> ->
for int i = <or_expr> ; <expression>; <expression> <stmt_block> ->
...
for int i = <primary_expr> ; <expression>; <expression> <stmt_block> ->
for int i = <literal> ; <expression>; <expression> <stmt_block> ->
for int i = <digits> ; <expression>; <expression> <stmt_block> ->
for int i = <digit> ; <expression>; <expression> <stmt_block> ->
for int i = 0 ; <expression>; <expression> <stmt_block> ->
for int i = 0 ; <and_expr>; <expression> <stmt_block> ->
for int i = 0 ; <and_expr> && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; <cmp_more_expr> && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; <cmp_more_expr> < <cmp_equals_expr> && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; <primary_expr> < <cmp_equals_expr> && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < <cmp_equals_expr> && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < <primary_expr> && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && <cmp_more_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && <cmp_equals_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && <cmp_equal_expr> == <add_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && <function_call_expr> == <add_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && <identifier> <params> == <add_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo<params> == <add_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == <add_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == <add_expr> + <mult_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == <literal> + <mult_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + <mult_expr>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + <literal>; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + 5; <expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + 5; <postfix_expr> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + 5; <increment_decrement_expression> <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + 5; <identifier>++ <stmt_block> ->
for int i = 0 ; i < 5 && foo() == true + 5; i++ <stmt_block> ->

<stmt_block> ->
{<stmts>} ->
{<stmt_with_sep>} ->
{<stmt>
} ->
{<io_stmt>
} ->
{<write_stmt>
} ->
{write <expressions>
} ->
{write <expression>
} ->
{write <postfix_expr>
} ->
{write <array_subscripting_expr>
} ->
{write <postfix_expr> [<expression>]
} ->
{write <identifier> [<expression>]
} ->
{write test [<expression>]
} ->
{write test [<literal>]
} ->
{write test [0]
} ->



